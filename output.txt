============================= test session starts ==============================
platform darwin -- Python 3.12.2, pytest-8.1.1, pluggy-1.4.0
rootdir: /Users/jakobunfried/tenpy/v2_development
configfile: pyproject.toml
testpaths: tests
collected 262 items / 244 deselected / 4 skipped / 18 selected

tests/linalg/test_spaces.py ......                                       [ 33%]
tests/linalg/test_tensors.py ............                                [100%]

==================================== PASSES ====================================
____________________________ test_str_repr[NoSymm] _____________________________
----------------------------- Captured stdout call -----------------------------
----------------------
ElementarySpace.__repr__()
----------------------
ElementarySpace(
  NoSymmetry(),
  sectors=[0],
  multiplicities=[3],
  basis_perm=[2, 0, 1],
  is_dual=False,
)


----------------------
ElementarySpace.__str__() 
----------------------
ElementarySpace(
  NoSymmetry(),
  sectors=[0],
  multiplicities=[3],
  basis_perm=[2, 0, 1],
  is_dual=False,
)


-----------------------
ProductSpace.__repr__()  2 spaces
-----------------------
ProductSpace(
  symmetry=NoSymmetry(),
  ElementarySpace(
    sectors=[0],
    multiplicities=[4],
    basis_perm=[0, 2, 3, 1],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[0],
    multiplicities=[4],
    basis_perm=[0, 3, 2, 1],
    is_dual=True,
  ),
)


-----------------------
ProductSpace.__str__()  2 spaces
-----------------------
ProductSpace(
  symmetry=NoSymmetry(),
  ElementarySpace(
    sectors=[0],
    multiplicities=[4],
    basis_perm=[0, 2, 3, 1],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[0],
    multiplicities=[4],
    basis_perm=[0, 3, 2, 1],
    is_dual=True,
  ),
)


-----------------------
ProductSpace.__repr__()  3 spaces
-----------------------
<ProductSpace symmetry=NoSymmetry() 3 spaces >


-----------------------
ProductSpace.__str__()  3 spaces
-----------------------
<ProductSpace symmetry=NoSymmetry() 3 spaces >


-----------------------
ProductSpace.__repr__()  4 spaces
-----------------------
<ProductSpace symmetry=NoSymmetry() 4 spaces >


-----------------------
ProductSpace.__str__()  4 spaces
-----------------------
<ProductSpace symmetry=NoSymmetry() 4 spaces >
______________________________ test_str_repr[U1] _______________________________
----------------------------- Captured stdout call -----------------------------
----------------------
ElementarySpace.__repr__()
----------------------
<ElementarySpace: U(1) 14 sectors basis_perm=[...] is_dual=True >


----------------------
ElementarySpace.__str__() 
----------------------
<ElementarySpace: U(1) 14 sectors basis_perm=[...] is_dual=True >


-----------------------
ProductSpace.__repr__()  2 spaces
-----------------------
ProductSpace(
  symmetry=U1Symmetry(),
  ElementarySpace(
    sectors=[-1, 2],
    multiplicities=[4, 3],
    basis_perm=[4, 0, 3, 6, 5, 2, 1],
    is_dual=True,
  ),
  ElementarySpace(
    sectors=[-123],
    multiplicities=[4],
    basis_perm=[2, 1, 3, 0],
    is_dual=True,
  ),
)


-----------------------
ProductSpace.__str__()  2 spaces
-----------------------
ProductSpace(
  symmetry=U1Symmetry(),
  ElementarySpace(
    sectors=[-1, 2],
    multiplicities=[4, 3],
    basis_perm=[4, 0, 3, 6, 5, 2, 1],
    is_dual=True,
  ),
  ElementarySpace(
    sectors=[-123],
    multiplicities=[4],
    basis_perm=[2, 1, 3, 0],
    is_dual=True,
  ),
)


-----------------------
ProductSpace.__repr__()  3 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() 3 spaces >


-----------------------
ProductSpace.__str__()  3 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() 3 spaces >


-----------------------
ProductSpace.__repr__()  4 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() 4 spaces >


-----------------------
ProductSpace.__str__()  4 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() 4 spaces >
______________________________ test_str_repr[Z2] _______________________________
----------------------------- Captured stdout call -----------------------------
----------------------
ElementarySpace.__repr__()
----------------------
ElementarySpace(
  ZNSymmetry(2),
  sectors=[0, 1],
  multiplicities=[5, 3],
  basis_perm=None,
  is_dual=False,
)


----------------------
ElementarySpace.__str__() 
----------------------
ElementarySpace(
  ZNSymmetry(2),
  sectors=[0, 1],
  multiplicities=[5, 3],
  basis_perm=None,
  is_dual=False,
)


-----------------------
ProductSpace.__repr__()  2 spaces
-----------------------
ProductSpace(
  symmetry=ZNSymmetry(2),
  ElementarySpace(
    sectors=[0, 1],
    multiplicities=[5, 3],
    basis_perm=[0, 2, 6, 3, 1, 5, 4, 7],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[0, 1],
    multiplicities=[2, 3],
    basis_perm=None,
    is_dual=False,
  ),
)


-----------------------
ProductSpace.__str__()  2 spaces
-----------------------
ProductSpace(
  symmetry=ZNSymmetry(2),
  ElementarySpace(
    sectors=[0, 1],
    multiplicities=[5, 3],
    basis_perm=[0, 2, 6, 3, 1, 5, 4, 7],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[0, 1],
    multiplicities=[2, 3],
    basis_perm=None,
    is_dual=False,
  ),
)


-----------------------
ProductSpace.__repr__()  3 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(2) 3 spaces >


-----------------------
ProductSpace.__str__()  3 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(2) 3 spaces >


-----------------------
ProductSpace.__repr__()  4 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(2) 4 spaces >


-----------------------
ProductSpace.__str__()  4 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(2) 4 spaces >
___________________________ test_str_repr[Z4_named] ____________________________
----------------------------- Captured stdout call -----------------------------
----------------------
ElementarySpace.__repr__()
----------------------
ElementarySpace(
  ZNSymmetry(4, "My_Z4_symmetry"),
  sectors=[0, 1, 2, 3],
  multiplicities=[2, 4, 4, 4],
  basis_perm=[8, 0, 4, 1, 7, 3, 13, 9, 5, 12, 6, 2, 10, 11],
  is_dual=True,
)


----------------------
ElementarySpace.__str__() 
----------------------
ElementarySpace(
  ZNSymmetry(4, "My_Z4_symmetry"),
  sectors=[0, 1, 2, 3],
  multiplicities=[2, 4, 4, 4],
  basis_perm=[8, 0, 4, 1, 7, 3, 13, 9, 5, 12, 6, 2, 10, 11],
  is_dual=True,
)


-----------------------
ProductSpace.__repr__()  2 spaces
-----------------------
ProductSpace(
  symmetry=ZNSymmetry(4, "My_Z4_symmetry"),
  ElementarySpace(
    sectors=[0, 2, 3],
    multiplicities=[1, 2, 1],
    basis_perm=[0, 2, 3, 1],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[1],
    multiplicities=[3],
    basis_perm=[2, 0, 1],
    is_dual=False,
  ),
)


-----------------------
ProductSpace.__str__()  2 spaces
-----------------------
ProductSpace(
  symmetry=ZNSymmetry(4, "My_Z4_symmetry"),
  ElementarySpace(
    sectors=[0, 2, 3],
    multiplicities=[1, 2, 1],
    basis_perm=[0, 2, 3, 1],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[1],
    multiplicities=[3],
    basis_perm=[2, 0, 1],
    is_dual=False,
  ),
)


-----------------------
ProductSpace.__repr__()  3 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(4, "My_Z4_symmetry") 3 spaces >


-----------------------
ProductSpace.__str__()  3 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(4, "My_Z4_symmetry") 3 spaces >


-----------------------
ProductSpace.__repr__()  4 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(4, "My_Z4_symmetry") 4 spaces >


-----------------------
ProductSpace.__str__()  4 spaces
-----------------------
<ProductSpace symmetry=ZNSymmetry(4, "My_Z4_symmetry") 4 spaces >
_____________________________ test_str_repr[U1xZ3] _____________________________
----------------------------- Captured stdout call -----------------------------
----------------------
ElementarySpace.__repr__()
----------------------
<ElementarySpace: U(1) ⨉ ℤ₃ 14 sectors basis_perm=[...] is_dual=False >


----------------------
ElementarySpace.__str__() 
----------------------
<ElementarySpace: U(1) ⨉ ℤ₃ 14 sectors basis_perm=[...] is_dual=False >


-----------------------
ProductSpace.__repr__()  2 spaces
-----------------------
ProductSpace(
  symmetry=U1Symmetry() * ZNSymmetry(3),
  ElementarySpace(
    sectors=[[0, 0], [2, 2]],
    multiplicities=[3, 4],
    basis_perm=[2, 0, 4, 5, 1, 3, 6],
    is_dual=True,
  ),
  ElementarySpace(
    sectors=[[2, 1]],
    multiplicities=[4],
    basis_perm=[1, 0, 2, 3],
    is_dual=True,
  ),
)


-----------------------
ProductSpace.__str__()  2 spaces
-----------------------
ProductSpace(
  symmetry=U1Symmetry() * ZNSymmetry(3),
  ElementarySpace(
    sectors=[[0, 0], [2, 2]],
    multiplicities=[3, 4],
    basis_perm=[2, 0, 4, 5, 1, 3, 6],
    is_dual=True,
  ),
  ElementarySpace(
    sectors=[[2, 1]],
    multiplicities=[4],
    basis_perm=[1, 0, 2, 3],
    is_dual=True,
  ),
)


-----------------------
ProductSpace.__repr__()  3 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() * ZNSymmetry(3) 3 spaces >


-----------------------
ProductSpace.__str__()  3 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() * ZNSymmetry(3) 3 spaces >


-----------------------
ProductSpace.__repr__()  4 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() * ZNSymmetry(3) 4 spaces >


-----------------------
ProductSpace.__str__()  4 spaces
-----------------------
<ProductSpace symmetry=U1Symmetry() * ZNSymmetry(3) 4 spaces >
______________________________ test_str_repr[SU2] ______________________________
----------------------------- Captured stdout call -----------------------------
----------------------
ElementarySpace.__repr__()
----------------------
<ElementarySpace: SU(2) 14 sectors basis_perm=[...] is_dual=False >


----------------------
ElementarySpace.__str__() 
----------------------
<ElementarySpace: SU(2) 14 sectors basis_perm=[...] is_dual=False >


-----------------------
ProductSpace.__repr__()  2 spaces
-----------------------
ProductSpace(
  symmetry=SU2Symmetry(),
  ElementarySpace(
    sectors=[0 (J=0), 1 (J=1/2)],
    multiplicities=[3, 4],
    basis_perm=[9, 2, 1, 3, 7, 10, 4, 8, 0, 6, 5],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[0 (J=0), 1 (J=1/2)],
    multiplicities=[4, 5],
    basis_perm=[4, 8, 3, 6, 11, 10, 2, 0, 13, 12, 1, 7, 5, 9],
    is_dual=False,
  ),
)


-----------------------
ProductSpace.__str__()  2 spaces
-----------------------
ProductSpace(
  symmetry=SU2Symmetry(),
  ElementarySpace(
    sectors=[0 (J=0), 1 (J=1/2)],
    multiplicities=[3, 4],
    basis_perm=[9, 2, 1, 3, 7, 10, 4, 8, 0, 6, 5],
    is_dual=False,
  ),
  ElementarySpace(
    sectors=[0 (J=0), 1 (J=1/2)],
    multiplicities=[4, 5],
    basis_perm=[4, 8, 3, 6, 11, 10, 2, 0, 13, 12, 1, 7, 5, 9],
    is_dual=False,
  ),
)


-----------------------
ProductSpace.__repr__()  3 spaces
-----------------------
<ProductSpace symmetry=SU2Symmetry() 3 spaces >


-----------------------
ProductSpace.__str__()  3 spaces
-----------------------
<ProductSpace symmetry=SU2Symmetry() 3 spaces >


-----------------------
ProductSpace.__repr__()  4 spaces
-----------------------
<ProductSpace symmetry=SU2Symmetry() 4 spaces >


-----------------------
ProductSpace.__str__()  4 spaces
-----------------------
<ProductSpace symmetry=SU2Symmetry() 4 spaces >
_______________________ test_str_repr[numpy-NoSymmetry] ________________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: NoSymmetryNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['vL', 'p', 'vR']
  * Shape: (3, 5, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: NoSymmetryNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['vL', 'p', 'vR']
  * Shape: (3, 5, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: NoSymmetryNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['p', 'p*']
  * Shape: (5, 5)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: NoSymmetryNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['p', 'p*']
  * Shape: (5, 5)
  * Domain -> Codomain: ['p*'] -> ['p']
>
__________________ test_str_repr[numpy-AbelianBackend-NoSymm] __________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['vL', 'p', 'vR']
  * Shape: (3, 5, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['vL', 'p', 'vR']
  * Shape: (3, 5, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['p', 'p*']
  * Shape: (5, 5)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['p', 'p*']
  * Shape: (5, 5)
  * Domain -> Codomain: ['p*'] -> ['p']
>
________________ test_str_repr[numpy-FusionTreeBackend-NoSymm] _________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['vL', 'p', 'vR']
  * Shape: (3, 5, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['vL', 'p', 'vR']
  * Shape: (3, 5, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['p', 'p*']
  * Shape: (5, 5)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: no_symmetry
  * Labels: ['p', 'p*']
  * Shape: (5, 5)
  * Domain -> Codomain: ['p*'] -> ['p']
>
____________________ test_str_repr[numpy-AbelianBackend-U1] ____________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1)
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 25, 11)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1)
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 25, 11)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1)
  * Labels: ['p', 'p*']
  * Shape: (11, 11)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1)
  * Labels: ['p', 'p*']
  * Shape: (11, 11)
  * Domain -> Codomain: ['p*'] -> ['p']
>
__________________ test_str_repr[numpy-FusionTreeBackend-U1] ___________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1)
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 25, 11)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1)
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 25, 11)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1)
  * Labels: ['p', 'p*']
  * Shape: (10, 10)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1)
  * Labels: ['p', 'p*']
  * Shape: (10, 10)
  * Domain -> Codomain: ['p*'] -> ['p']
>
____________________ test_str_repr[numpy-AbelianBackend-Z2] ____________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['vL', 'p', 'vR']
  * Shape: (8, 10, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['vL', 'p', 'vR']
  * Shape: (8, 10, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['p', 'p*']
  * Shape: (6, 6)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['p', 'p*']
  * Shape: (6, 6)
  * Domain -> Codomain: ['p*'] -> ['p']
>
__________________ test_str_repr[numpy-FusionTreeBackend-Z2] ___________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['vL', 'p', 'vR']
  * Shape: (8, 10, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['vL', 'p', 'vR']
  * Shape: (8, 10, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['p', 'p*']
  * Shape: (6, 6)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₂
  * Labels: ['p', 'p*']
  * Shape: (6, 6)
  * Domain -> Codomain: ['p*'] -> ['p']
>
_________________ test_str_repr[numpy-AbelianBackend-Z4_named] _________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 20, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 20, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['p', 'p*']
  * Shape: (8, 8)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['p', 'p*']
  * Shape: (8, 8)
  * Domain -> Codomain: ['p*'] -> ['p']
>
_______________ test_str_repr[numpy-FusionTreeBackend-Z4_named] ________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 20, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['vL', 'p', 'vR']
  * Shape: (14, 20, 8)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['p', 'p*']
  * Shape: (7, 7)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: ℤ₄("My_Z4_symmetry")
  * Labels: ['p', 'p*']
  * Shape: (7, 7)
  * Domain -> Codomain: ['p*'] -> ['p']
>
__________________ test_str_repr[numpy-AbelianBackend-U1xZ3] ___________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['vL', 'p', 'vR']
  * Shape: (11, 15, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['vL', 'p', 'vR']
  * Shape: (11, 15, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['p', 'p*']
  * Shape: (12, 12)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: AbelianNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['p', 'p*']
  * Shape: (12, 12)
  * Domain -> Codomain: ['p*'] -> ['p']
>
_________________ test_str_repr[numpy-FusionTreeBackend-U1xZ3] _________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['vL', 'p', 'vR']
  * Shape: (11, 14, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['vL', 'p', 'vR']
  * Shape: (11, 14, 4)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['p', 'p*']
  * Shape: (4, 4)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: U(1) ⨉ ℤ₃
  * Labels: ['p', 'p*']
  * Shape: (4, 4)
  * Domain -> Codomain: ['p*'] -> ['p']
>
__________________ test_str_repr[numpy-FusionTreeBackend-SU2] __________________
----------------------------- Captured stdout call -----------------------------


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: SU(2)
  * Labels: ['vL', 'p', 'vR']
  * Shape: (34, 55, 3)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: SU(2)
  * Labels: ['vL', 'p', 'vR']
  * Shape: (34, 55, 3)
  * Domain -> Codomain: ['vR', 'p'] -> ['vL']
>


----------------------
__repr__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: SU(2)
  * Labels: ['p', 'p*']
  * Shape: (61, 61)
  * Domain -> Codomain: ['p*'] -> ['p']
>


----------------------
__str__()
----------------------
<SymmetricTensor
  * Backend: FusionTreeNumpyBackend
  * Symmetry: SU(2)
  * Labels: ['p', 'p*']
  * Shape: (61, 61)
  * Domain -> Codomain: ['p*'] -> ['p']
>
================ 18 passed, 4 skipped, 244 deselected in 0.08s =================
